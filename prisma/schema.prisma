// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  username        String?   @unique
  botname         String?
  isSetupComplete Boolean   @default(false)
  langtolearn     String    @default("HIN")
  lang            String    @default("ENG")
  isMalebot       Boolean   @default(true)
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BotChat {
  id               String           @id @default(cuid())
  isbotrespond     Boolean          @default(true)
  inlanguage       String
  transletedLang   String
  reply            String
  replyTranslation String
  wordsinreply     WordsInBotChat[]
  inreplyof        Chat?
  createdAt DateTime @default(now())
}

model Chat {
  id           String  @id @default(cuid())
  message      String
  isbotrespond Boolean @default(false)
  inlanguage   String
  replyid      String  @unique
  reply        BotChat @relation(fields: [replyid], references: [id])
  createdAt DateTime @default(now())
  
  @@index([replyid])
}

model WordsInBotChat {
  chat    BotChat  @relation(fields: [chatid], references: [id])
  chatid  String
  Word    Word     @relation(fields: [wordid], references: [id])
  wordid  String
  addedAt DateTime @default(now())

  @@id([wordid, chatid])
  @@index([chatid, wordid])
}

model Word {
  id             String           @id @default(cuid())
  word           String
  inlanguage     String
  translation    String
  translatedLang String
  inChats          WordsInBotChat[]
}
